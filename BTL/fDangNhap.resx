<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        iBMzWJx5R3Qea0Jx0c9PTvRLOEGrvxfpQCBJs0hKnjU3LO4H8U//2gAMAwEAAgADAAAAEPffffffffff
        ffffffffffffffffffffffffffffffffeKzs9fffffffavrxze9ffffffc/ffPfX/fffffI/RPUNW/ff
        fffb/wC0ddq/333332m2RFAR333333333/6d33333333333333333333333333333333333333333333
        /8QAHxEBAAICAgIDAAAAAAAAAAAAAQARITEgMBBQQVFx/9oACAEDAQE/EPVqEylP3LTcG+hagVllKyi9
        wJtifJBsvnvyo4eTCnPZi1uKudEMtS3bpabguKTLCup+oKIZb5pZUt0yxhlYq4lrggV0IO5Y0yos7gV6
        z//EAB8RAQACAgIDAQEAAAAAAAAAAAEAESExIEEQMFBRYf/aAAgBAgEBPxD5a1Msp/Zabg36FqB2ymYu
        Am2J2Qb57fLS08mGuZtjiLcDNS63475uG4kpYV1MwKhnPNLn8dy6lJljnHpS5T1Mynv5v//EACgQAQAB
        BAECBgMBAQEAAAAAAAERACExQVFhcRAgMIGRoUCxwXDw4f/aAAgBAQABPxD/ACYQjSiAOrqi5IjQe4T7
        ox55fri0lTsiYPkvqhSIxc+HH6/FWlxpNoJc+wbFGmDJAL07feXWg5tAYB0C1HMeDA5VsUEl5AB0TNJX
        bWP3SLPjsCT9SlHcNhnpe3VLmw/CYkZUIwBcLIF1IWlozJjADABgqc3xKCABMpm6EG9ACTMhICORCxJL
        0wqSMOAiORG8koUB2cJQVHcTGbSwtXhwkH9u7ScTYmFBiHO4rDsxExaZiS9DSW0L8GuH/jJUkUmANkHI
        PkLNvXaZR6JEIOkt4JaoxHiYEQAcB4XFYJezqTVMhmoKSrKq3VVVbq1f2wON9x9imBz+pVc9ys5LkQI6
        EhHjBzGCnCP6TYpuoSxjekHRsHYesZQSjAGWkyECJc/ox7n5RzUnfQC4OhFW0AtGxeVMmrtU5Yx5Di0M
        0I7ofWgsgImRU+lQ/gCYAID48oHAc5zuZGVxbNErUzQ4KDiwNF8sC7zuAfcB70pckJ0bnqmUxN/5MijH
        kaBjMFsJh4GG3VSbYMznwHKABYpSOoqtCbBIBABdxQg0xbZGcX4BsPIN9IvdlJlSu/qllMuuB/sNGPCC
        Jmpqx3TgrNF4E+l1I5OKlN/5fUSGCEDUCnCMaxKCBtMLa0rQLdizgB+qG55BJQMCuGkvXfCnDprHB2bo
        g5jAHCJZPAmkKfagm4SHCF6pdKIpzH1lPNPYUD/fAENg0SWOIFCy7Kag2dBv8oGI3KzYoJJCsMg06aKP
        CADZMBUKwYAUn+6wIUgTAAXN3fgHgrz+fhMEZaCkFmFv4JktlGZyvan2IPVLM0i5Cn5AO8O3gX5aVbfN
        X2rUVflrqPmpYl81/wBfwcD0JIiHYd19eyLewykdM2eGHVGQRCRZA6D/ABLNXlk8MrLiACrJiMpUpTeY
        42iGhuWeDZWlAZESRPap8M+qRdJJ11oDZms0UsAxAyqTpJvBWGw5ybHYlLAOmJJY6MwOA5q+sOJ2Kdqq
        rtX8B4IQhj4FoP0smJEP9jV+pJHS0EteFghJExaGBuzaAW3FVSHIiE3i9rkeixRKSYCJZJ5TeJGFZFbV
        rP6KHEwDLZGy6biYWzFRucptjZWbY6mc1Gm1xQnBMOB0DdHC8RAMWMJYLB1l/CikuO3k25SLii3a3DOq
        m6h2rbrFUD7Bey0HC4FaSSXswp2WlzpMApGJyqvelDJUQifWJo2bbMR8QR2maBlCwcmUt02sr+KpA+iT
        4rrJJT+qHnWFx7hWg0YP8o//2Q==
</value>
  </data>
</root>